#!/bin/bash

# GembaFix Notification CLI Tool
# Sends audio and visual notifications for Claude Code attention requests
# Optimized for reliability in terminal environments like Cursor

# Configuration
SOUND_ENABLED=true
VOICE_ENABLED=true
VISUAL_ENABLED=true
DEFAULT_SOUND="/System/Library/Sounds/Glass.aiff"
ATTENTION_SOUND="/System/Library/Sounds/Hero.aiff"
DEFAULT_VOICE="Samantha"

# Function to play sound notification
play_sound() {
    local sound_file="$1"
    if [[ "$SOUND_ENABLED" == "true" ]] && [[ "$OSTYPE" == "darwin"* ]]; then
        # Use afplay for reliable audio playback on macOS
        if command -v afplay &> /dev/null; then
            afplay "$sound_file" -v 0.5 2>/dev/null &
        fi
    fi
}

# Function to speak text
speak_text() {
    local text="$1"
    if [[ "$VOICE_ENABLED" == "true" ]] && [[ "$OSTYPE" == "darwin"* ]]; then
        # Use say command for text-to-speech
        if command -v say &> /dev/null; then
            say -v "$DEFAULT_VOICE" "$text" 2>/dev/null &
        fi
    fi
}

# Function to play terminal bell
play_bell() {
    # Terminal bell - works in most terminals
    printf '\a'
}

# Function to attempt visual notification
visual_notify() {
    local title="$1"
    local message="$2"
    
    if [[ "$VISUAL_ENABLED" != "true" ]]; then
        return
    fi
    
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # Try terminal-notifier first (if installed)
        if command -v terminal-notifier &> /dev/null; then
            terminal-notifier -title "$title" -message "$message" 2>/dev/null &
        else
            # Fall back to osascript (may not work in some environments)
            osascript -e "display notification \"$message\" with title \"$title\"" 2>/dev/null &
        fi
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        if command -v notify-send &> /dev/null; then
            notify-send "$title" "$message" -u normal -t 5000 2>/dev/null &
        fi
    fi
}

# Main notification function
notify() {
    local category="$1"
    local message="$2"
    local is_attention="$3"
    local title="GembaFix: $category"
    
    # Add timestamp
    local timestamp=$(date "+%H:%M:%S")
    local full_message="[$timestamp] $message"
    
    # Always print to console for logging
    if [[ "$is_attention" == "true" ]]; then
        echo "üö® ATTENTION REQUIRED: $title - $full_message"
    else
        echo "üîî $title - $full_message"
    fi
    
    # For attention notifications, use multiple methods to ensure user notices
    if [[ "$is_attention" == "true" ]]; then
        # Play attention sound
        play_sound "$ATTENTION_SOUND"
        
        # Voice disabled - just use sound
        # if [[ "$VOICE_ENABLED" == "true" ]]; then
        #     speak_text "Attention"
        # fi
        
        # Play terminal bell
        play_bell
        
        # Try visual notification
        visual_notify "‚ö†Ô∏è $title" "$full_message"
    else
        # For regular notifications, just use sound
        play_sound "$DEFAULT_SOUND"
        
        # Try visual notification
        visual_notify "$title" "$full_message"
    fi
}

# Main command handler
case "$1" in
    alert)
        if [ -z "$2" ] || [ -z "$3" ]; then
            echo "Usage: gembafix-notify alert <category> <message>"
            echo "Example: gembafix-notify alert \"task complete\" \"All tests passed\""
            exit 1
        fi
        notify "$2" "$3" "false"
        ;;
    
    attention)
        if [ -z "$2" ] || [ -z "$3" ]; then
            echo "Usage: gembafix-notify attention <category> <message>"
            echo "Example: gembafix-notify attention \"user input\" \"Review 3 changes before proceeding\""
            exit 1
        fi
        notify "$2" "$3" "true"
        ;;
    
    test)
        echo "Testing notification system..."
        echo ""
        echo "1. Testing regular alert..."
        notify "test" "Regular notification test" "false"
        sleep 2
        echo ""
        echo "2. Testing attention notification..."
        notify "test" "This requires your attention!" "true"
        echo ""
        echo "If you heard sounds and/or saw notifications, the system is working!"
        echo "If not, check the troubleshooting section with: gembafix-notify help"
        ;;
    
    config)
        if [ -z "$2" ]; then
            echo "Current configuration:"
            echo "  Sound enabled: $SOUND_ENABLED"
            echo "  Voice enabled: $VOICE_ENABLED"
            echo "  Visual enabled: $VISUAL_ENABLED"
            echo "  Default sound: $DEFAULT_SOUND"
            echo "  Attention sound: $ATTENTION_SOUND"
            echo "  Voice: $DEFAULT_VOICE"
            echo ""
            echo "Usage: gembafix-notify config <setting> <value>"
            echo "Example: gembafix-notify config voice Alex"
        else
            case "$2" in
                sound)
                    SOUND_ENABLED="$3"
                    echo "Sound notifications set to: $3"
                    ;;
                voice)
                    DEFAULT_VOICE="$3"
                    echo "Voice set to: $3"
                    ;;
                *)
                    echo "Unknown setting: $2"
                    ;;
            esac
        fi
        ;;
    
    sounds)
        echo "Available system sounds on macOS:"
        ls /System/Library/Sounds/*.aiff 2>/dev/null | xargs -n1 basename | sed 's/\.aiff$//'
        echo ""
        echo "Test a sound with: afplay /System/Library/Sounds/NAME.aiff"
        ;;
    
    voices)
        if [[ "$OSTYPE" == "darwin"* ]]; then
            echo "Available voices for text-to-speech:"
            say -v "?" | awk '{print $1}' | column
        else
            echo "Voice listing only available on macOS"
        fi
        ;;
    
    help|*)
        echo "GembaFix Notification CLI"
        echo ""
        echo "Commands:"
        echo "  alert <category> <message>     - Send a regular notification"
        echo "  attention <category> <message> - Send an urgent notification (multiple alerts)"
        echo "  test                          - Test the notification system"
        echo "  config [setting] [value]      - View or change configuration"
        echo "  sounds                        - List available system sounds (macOS)"
        echo "  voices                        - List available voices (macOS)"
        echo "  help                          - Show this help"
        echo ""
        echo "Examples:"
        echo "  gembafix-notify alert \"task complete\" \"Build finished successfully\""
        echo "  gembafix-notify attention \"user input\" \"Please review these changes\""
        echo ""
        echo "Troubleshooting:"
        echo "1. If no sound on macOS:"
        echo "   - Check System Settings > Sound > Sound Effects volume"
        echo "   - Try: afplay /System/Library/Sounds/Ping.aiff"
        echo ""
        echo "2. If visual notifications don't work:"
        echo "   - Check System Settings > Notifications > Terminal"
        echo "   - For Cursor: May need to grant automation permissions"
        echo "   - Visual notifications are optional - audio is primary"
        echo ""
        echo "3. Test individual components:"
        echo "   - Sound: afplay /System/Library/Sounds/Glass.aiff"
        echo "   - Voice: say \"Hello from GembaFix\""
        echo "   - Bell: printf '\\a'"
        exit 1
        ;;
esac